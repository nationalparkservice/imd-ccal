% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/edd.R
\name{write_results}
\alias{write_results}
\title{Write the results table of the EQuIS EDD.}
\usage{
write_results(
  files,
  limits = imdccal::limits,
  qualifiers = imdccal::qualifiers,
  format = c("xlsx", "csv"),
  destination_folder = "./",
  overwrite = FALSE,
  concat = FALSE
)
}
\arguments{
\item{files}{Path to .xlsx file delivered by CCAL. Use a character vector to specify multiple files.}

\item{limits}{Table with detection limits. By default, uses the version in the package. User-defined versions must have the same columns.}

\item{qualifiers}{Table with flags and their meanings. By default, uses the version in the package. User-defined versions must have the same columns.}

\item{format}{File format to export machine readable data to - either "xlsx" or "csv"}

\item{destination_folder}{Folder to save the data in. Defaults to current working directory. Folder must already exist.}

\item{overwrite}{Overwrite existing file (Defaults to \code{TRUE} as with \code{write.table})}

\item{concat}{If concat is set to TRUE, the function creates one file rather than one for every CCAL deliverable.
By default, concat is set to FALSE, so the output contains separate files for each CCAL deliverable.
If only one file path is supplied to the files argument, this parameter does not affect the output.}
}
\value{
Invisibly returns a list containing the data that were written to file.
}
\description{
Write the results table of the EQuIS EDD.
}
\examples{
\dontrun{
# Edit limits table to work with example data
limits <- imdccal::limits |>
  dplyr::mutate(EndDate = dplyr::if_else(EndDate == "2024-12-31", lubridate::ymd("2099-12-31"), EndDate))

# Get file paths
all_files <- use_example_data(file_names = use_example_data())

# Write to xlsx
write_results(files = all_files,
              limits = limits,
              destination_folder = "ccal_tidy",
              overwrite = TRUE)  # Write one file of tidied data per input file

# Write to csv
write_results(files = all_files,
              limits = limits,
              format = "csv",
              destination_folder = "ccal_tidy",
              overwrite = TRUE)  # Write one folder of tidied CSV data per input file
}
}
